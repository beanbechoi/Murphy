// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRSound.h// Auth: Dave Peck// Date: 7/2/97// Desc: sound routine headers for MR// ----------------------------------------------------------------// Includes// ----------------------------------------------------------------#include "MacIncludes.h"// ----------------------------------------------------------------// Constants// ----------------------------------------------------------------// music info resource type is just a string.#define kMusicInfoResType			'STR '#define kMaxProximity				22// the sound ids#define kGotInfotronSnd					128#define kThudSnd						129#define kExplodeSnd						131#define kQuarkExplodeSnd				132#define kGotRedDiskSnd					133#define kRedDiskReadySnd				134#define kGotLastInfotronSnd				135#define kOliverDiedSnd					137#define kPauseSnd						138#define kUnpauseSnd						139#define kBugZapSnd						140#define kPushSnd						141#define kClickSnd						144#define kTickSnd						145#define kDingSnd						146#define kLogoSnd						150#define kEndLevelSnd					151// music ids#define kInterfaceMusic					1000#define kGamePlayMusic					2000#define kMapRoomMusic					5000// ----------------------------------------------------------------// Data Structures// ----------------------------------------------------------------// ----------------------------------------------------------------// Global Data// ----------------------------------------------------------------// ----------------------------------------------------------------// Function Prototypes// ----------------------------------------------------------------// ----------------------------------------------------------------// Functions// ----------------------------------------------------------------// init and close soundsBoolean MRSoundInit();void MRSoundClose();// sound statesBoolean GetSoundState();void SetSoundState( Boolean newState );Boolean GetMusicState();void SetMusicState( Boolean newState );// play a soundvoid PlaySoundID( int soundID );void PlaySoundIDProx( int soundID, short proximity );void PlaySoundIDStereo( int soundID, short proximity, short signedPan );// start musicvoid PlayMusic( int musicInfoResID, Boolean fadeIn );void KeepMusicGoing();// fade current music out!void FadeMusicOut();void FadeMusicIn();// stop current music.void StopMusic();// memory management routinesvoid FlushAllSounds();void AddSoundID( short id );// a routine to give a sound priority (i.e. if all sound channels are being used,// stop one of the sounds & play this instead)void NextSoundPriority();