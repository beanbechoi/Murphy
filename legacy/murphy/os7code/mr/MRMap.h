// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRMap.h// Auth: Dave Peck// Date: 7/13/97// Desc: Header file for the map routines// ----------------------------------------------------------------// Includes// ----------------------------------------------------------------#include "MRResources.h"#include "MRSound.h"#include "MacIncludes.h"#include "MRFade.h"#include "MRGfxUtils.h"#include "MacColorOff.h"#include "MRLoop.h"#include "MRPlayers.h"#include <SWIncludes.h>// ----------------------------------------------------------------// Constants// ----------------------------------------------------------------#define kMapPlayReturn		10#define kMapErrorReturn		1#define kMapQuitReturn		2#define kMapBackReturn		3#define kMaxWorldSize		120#define kWorldItemSize		24#define kSixteenConstant	24#define kWorldResType		'MRwd'#define kWorldResID			128#define kMaxMapPresses		4#define kTilesWide			18#define kTilesDeep			20// ----------------------------------------------------------------// Data Structures// ----------------------------------------------------------------// info about a level on the map// extra level information// is a bit bigger than the non-timed data structure, but it doesn't matter,// since there will be a few garbage bytes to read instead!typedef struct MapLevelInfo {	short	reqInfo;	short	levelWorld;	char	levelTitle[256];	char	levelInfo[256];	short	phCount;	short	pvCount;	short	kindCount;	short	actualInfo;	short	hours, mins, secs;	Boolean	isExtended;};typedef struct MapLevelInfo MapLevelInfo;// the map entry - there are 120x120 of these! = 230ktypedef struct WorldPoint {	Point p;			// the icon	short trig;			// the trigger associated with this piece.	Point trigP;		// the icon to trigger to.	short state;		// current state of piece	short kind;			// normal, switch, level	short levelID;		// level associated with this piece.};typedef struct WorldPoint WorldPoint;typedef WorldPoint** WorldArrayPtr;typedef WorldArrayPtr* WorldArrayHand;// the map callback datatypedef struct MapCBInfoStruct {	WindowPtr		mainWind;	Rect			fitRect;	Rect			mapRect;		// map data type	WorldPoint	theWorld[kMaxWorldSize][kMaxWorldSize];		// sprites and maps related stuff	SpriteWorldPtr	mapWorld;	TileMapPtr		mapTiles;	SpritePtr		mapSprite;	Rect			offRect;	Point			spritePt;	Rect			midRect;		// info for the level info box	SpritePtr		infoSprite;	Rect			infoRect;	Rect			infoPlayRect, infoPlayGfxRect;	Point			infoAdjust;	Point			infoScreenOffset;	Boolean			frozeLast;		// for keypresses, this is invaluable	short			theKeys[kMaxMapPresses];	int				numKeys;		// for piece kinds	int				pieceKinds[kTilesDeep][kTilesWide];		// for sprite animation	long			lastSpriteFrame;		// the back-arrow	Rect			baRect;		// bubbly!	MRBubbleData	bubbleData;		// for the stat clicks	GWorldPtr		statOff;	GWorldPtr		statHiliteOff;	Rect			statOffRect;	Point			statAdjust;	Rect			switchPlayerRect;		// a bug involving clipping in spriteworld tiles leads me to need this	Boolean			safeToSwitch;		// for the player-select dlog	PSDialog		playerSelect;		// for quitting to play a particular level	Boolean			onLevel;	short			levelNumber;	Boolean			canProceed;	long			levelEnterTime;	Boolean			quitForLevel;		// cursor hidden?	Boolean			hiddenCursor;		// that bug again!	FramePtr*		TFA;	FramePtr		tf0, tf1;		// Keep track of when we drew frames	long			lastOceanTick, lastOcean2Tick, lastOcean3Tick, lastOcean4Tick;	long			lastLevelTick;	long			lastWhirlTick;	long			lastThingTick;	long			lastGrabTick;	long			doingGrab;	long			lastMachineTick;	long			lastWaveTick;	short			waveLineUpdated;		// for special-effects transitions	Boolean			transitionOnAnim;};typedef struct MapCBInfoStruct MapCBInfoStruct;typedef MapCBInfoStruct *MapCBInfo;// ----------------------------------------------------------------// Global Data// ----------------------------------------------------------------// ----------------------------------------------------------------// Function Prototypes// ----------------------------------------------------------------// ----------------------------------------------------------------// Functions// ----------------------------------------------------------------int RunMapRoom( WindowPtr wind );