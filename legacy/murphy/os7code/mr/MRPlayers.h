// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRPlayers.h// Auth: Dave Peck// Date: 7/21/97// Desc: Basic utilities for managing players.// ----------------------------------------------------------------// Includes// ----------------------------------------------------------------#include "MacIncludes.h"#include "MRGfxUtils.h"/*  _name_      ******  ----------- ******  Time:       ******  Wins:       ******  Rank:	   W/T		.0-.2		.2-.4		.4-.6		.6-.8		.8-1.0  Wins	1-10		Soap Scum	Vapor			11-20			21-30			31-40			41+				*/// ----------------------------------------------------------------// Constants// ----------------------------------------------------------------#define MAX_PLAYER_NAME_LENGTH		20#define TIME_STRING_LENGTH			64#define kPSDlogTrackRects			7#define kPSPrev						0#define kPSNext						1#define kPSText						2#define kPSRename					3#define kPSNew						4#define kPSDelete					5#define kPSSelect					6#define kPSConfDlogTrackRects		2#define kPSConfNo					0#define kPSConfYes					1#define kPSNormalState				0#define kPSConfirmState				1#define kPSEditState				2#define MAX_PLAYERS					50#define MAX_SWITCHES				100#define MAX_LEVELS					100// ----------------------------------------------------------------// Data Structures// ----------------------------------------------------------------typedef struct _mr_pds_one_t {	short			hours, mins, secs, days;	// please say we don't need weeks.	Point 			mapLocation;	Point			previousLocation;	short 			numThrows;		// switches thrown.	char  			myName[MAX_PLAYER_NAME_LENGTH];	short 			theThrows[MAX_SWITCHES];	Boolean 		passedLevel[MAX_LEVELS];};typedef struct _mr_pds_one_t _mr_pds_one_t;typedef _mr_pds_one_t *_mr_pds_one_p;typedef _mr_pds_one_p *_mr_pds_one_h;typedef struct _mr_pls_one_t {	short						playerCount;	short						currentPlayer;	struct _mr_pds_one_t 	players[ MAX_PLAYERS ];};typedef struct _mr_pls_one_t _mr_pls_one_t;typedef _mr_pls_one_t *_mr_pls_one_p;typedef _mr_pls_one_p *_mr_pls_one_h;typedef struct MRPlayerDataStruct {	short			hours, mins, secs, days;	// please say we don't need weeks.	Point 			mapLocation;	Point			previousLocation;	short 			numThrows;		// switches thrown.	char  			myName[MAX_PLAYER_NAME_LENGTH];	short 			theThrows[MAX_SWITCHES];	Boolean 		passedLevel[MAX_LEVELS];		short			levelsWon;	short			levelsTried;	short			recentLevel;	short			expansion1;	short			expansion2;	short			expansion3;	};typedef struct MRPlayerDataStruct MRPlayerDataStruct;typedef MRPlayerDataStruct *MRPlayerData;typedef MRPlayerData *MRPlayerHand;typedef struct MRPlayerListStruct {	short						playerCount;	short						currentPlayer;	struct MRPlayerDataStruct 	players[ MAX_PLAYERS ];};typedef struct MRPlayerListStruct MRPlayerListStruct;typedef MRPlayerListStruct *MRPlayerList;typedef MRPlayerList *MRPlayerListHand;typedef struct PSDialogStruct {	// basic info about where to draw.	WindowPtr		mainWind;	Rect			fitRect;	Rect			offRect;	Point			fitAdjust;		// the offscreens containing the original & hilited pselect gfx	GWorldPtr		off;	GWorldPtr		hiliteOff;	GWorldPtr		restoreOff;		// buttons in the main dialog, and their locations	Rect			trackRects[ kPSDlogTrackRects ];	Rect			trackOffRects[ kPSDlogTrackRects ];		// current state of the dialog:	int				state;		// the current "top" player == top of the list.	int				topPlayer;		// info about the location of the cursor, 	// if in edit mode.	Point			cursorLocation;	long			lastCursorTick;	Boolean			cursorOn;		// true if the next return key should be	// ignored.	Boolean			ignoreReturn;		// for double-click tracking	long			lastClickTick;		// info about the "Are you sure?" confirmation dialog	GWorldPtr		confOff;	GWorldPtr		confHiliteOff;	Rect			confOffRect;	Rect			confFitRect;	Point			confFitAdjust;	Rect			confTrackRects[ kPSConfDlogTrackRects ];	GWorldPtr		confRestoreOff;		// for bubbly oliver	MRBubbleData 	bubbleData;};typedef struct PSDialogStruct PSDialogStruct;typedef PSDialogStruct *PSDialog;// ----------------------------------------------------------------// Global Data// ----------------------------------------------------------------// ----------------------------------------------------------------// Function Prototypes// ----------------------------------------------------------------// call from init & deinit codevoid InitPlayers();void ClosePlayers();// public routines for accessing playersMRPlayerData GetCurrentPlayer();// utility routines for getting info about playerschar* GetPlayerName( MRPlayerData thePlayer );char* MakePlayerTimeString( MRPlayerData thePlayer );// to add play-time to the player infovoid AddTicksToPlayer( MRPlayerData thePlayer, long theTicks );// the player selection dialog code.// Boolean routines return "true" if the // dialog should be destroyed.PSDialog PSCreate( WindowPtr mainWind );Boolean PSClick( PSDialog psd, Point where );Boolean PSKey( PSDialog psd, char key, int mods, Boolean keyUp );Boolean PSIdle( PSDialog psd );void PSDestroy( PSDialog* psd );// ----------------------------------------------------------------// Functions// ----------------------------------------------------------------