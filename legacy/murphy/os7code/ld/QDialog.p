unit QDialog;interfaceuses PascalSucks;	procedure Q_OKDialog (num: integer);	function Q_ChoiceDialog (num: integer; maxLegal: integer): integer;	procedure Q_HiliteItem (d: DialogPtr; num: integer; should: boolean);	procedure Q_RadioCluster (d: DialogPtr; n: integer; start: integer; lengthe: integer);	function Q_ItemIsHilited (d: DialogPtr; n: integer): boolean;	procedure Q_ToggleHilite (d: DialogPtr; num: integer);	function Q_GetMenuItemTextRect (d: DialogPtr; i: integer): rect;	procedure Q_SetItemRect (d: DialogPtr; i: integer; r: rect; rgn: RgnHandle);implementation	procedure Q_SetItemRect (d: DialogPtr; i: integer; r: rect; rgn: RgnHandle);		var			a: integer;			b: rect;			item: Handle;	begin		HideDialogItem(d, i);		GetDialogItem(d, i, a, item, b);		SetDialogItem(d, i, a, item, r);		ShowDialogItem(d, i);		UpdateDialog(d, rgn);	end;	function Q_GetMenuItemTextRect (d: DialogPtr; i: integer): rect;		var			a: integer;			b: rect;			item: Handle;	begin		GetDialogItem(d, i, a, item, b);		Q_GetMenuItemTextRect := b;	end;	procedure Q_RadioCluster (d: DialogPtr; n: integer; start: integer; lengthe: integer);		var			e: integer;	begin		for e := start to start + lengthe do			Q_HiliteItem(d, e, false);		Q_HiliteItem(d, n, true);	end;	procedure Q_ToggleHilite (d: DialogPtr; num: integer);		var			a: integer;			b: rect;			item: Handle;	begin		GetDialogItem(d, num, a, item, b);		if Q_ItemIsHilited(d, num) then			SetControlValue(ControlHandle(item), 0)		else			SetControlValue(ControlHandle(item), 1);	end;	function Q_ItemIsHilited (d: DialogPtr; n: integer): boolean;		var			a: integer;			b: rect;			item: Handle;	begin		GetDialogItem(d, n, a, item, b);		Q_ItemIsHilited := (GetControlValue(ControlHandle(item)) = 1);	end;	procedure Q_HiliteItem (d: DialogPtr; num: integer; should: boolean);		var			a: integer;			b: rect;			item: Handle;	begin		GetDialogItem(d, num, a, item, b);		if should then			SetControlValue(ControlHandle(item), 1)		else			SetControlValue(ControlHandle(item), 0);	end;	procedure Q_OKDialog (num: integer);		var			tDlog: DialogPtr;			itemHit: integer;	begin		tDlog := GetNewDialog(num, nil, WindowPtr(-1));		ShowWindow(tDlog);		SetPort(tDlog);		ModalDialog(nil, itemHit);		DisposeDialog(tDlog);	end;	function Q_ChoiceDialog (num: integer; maxLegal: integer): integer;		var			tDlog: DialogPtr;			itemHit: integer;	begin		tDlog := GetNewDialog(num, nil, WindowPtr(-1));		ShowWindow(tDlog);		SetPort(tDlog);		repeat			ModalDialog(nil, itemHit);		until itemHit <= maxLegal;		Q_ChoiceDialog := itemHit;		DisposeDialog(tDlog);	end;end.