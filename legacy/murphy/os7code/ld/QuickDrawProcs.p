unit QuickDrawProcs;{misc. units for using Quick Draw}{infotron version}interfaceuses PascalSucks;	procedure DrawPic (id: integer; at: point);	procedure DrawPicLoc (id: integer; h: integer; v: integer);	procedure DrawPicCenterGraf (id: integer);	function GetPRect (id: integer): rect;	function POffsetRect (aRect: rect; a, b: integer): rect;	function RectEqual (r1, r2: rect): boolean;	function InsetRectFunction (r: rect; dh, dv: integer): rect;implementation	function InsetRectFunction (r: rect; dh, dv: integer): rect;	begin		InsetRect(r, dh, dv);		InsetRectFunction := r;	end;	function RectEqual (r1, r2: rect): boolean;	begin		RectEqual := (r1.top = r2.top) and (r1.left = r2.left) and (r1.right = r2.right) and (r1.bottom = r2.bottom);	end;	function POffsetRect (aRect: rect; a, b: integer): rect;	begin		offsetRect(aRect, a, b);		pOffsetRect := aRect;	end;	procedure DrawPicLoc (id: integer; h: integer; v: integer);		var			at: point;	begin		at.h := h;		at.v := v;		DrawPic(id, at);	end;	procedure DrawPic (id: integer; at: point);		var			aPic: picHandle;			aRect: rect;	begin		aPic := nil;		aPic := GetPicture(id);		if aPic <> nil then			begin				aRect := aPic^^.picFrame;				OffsetRect(aRect, -aRect.left + at.h, -aRect.top + at.v);				DrawPicture(aPic, aRect);				ReleaseResource(handle(aPic));			end;	end;	function GetPRect (id: integer): rect;		var			aPic: picHandle;			aRect: rect;	begin		aPic := nil;		aPic := GetPicture(id);		SetRect(aRect, 0, 0, 0, 0);		if aPic <> nil then			begin				aRect := aPic^^.picFrame;				OffsetRect(aRect, -aRect.left, -aRect.top);				ReleaseResource(handle(aPic));			end;		GetPRect := aRect;	end;	procedure DrawPicCenterGraf (id: integer);		var			portToCenterIn: GrafPtr;			thePortsRect: rect;			myPRect: rect;			myDrawPoint: point;	begin		GetPort(portToCenterIn);		myPRect := GetPRect(id);		thePortsRect := portToCenterIn^.portRect;		myDrawPoint.h := ((thePortsRect.right - thePortsRect.left) div 2) - (myPRect.right div 2) + thePortsRect.left;		myDrawPoint.v := ((thePortsRect.bottom - thePortsRect.top) div 2) - (myPRect.bottom div 2) + thePortsRect.top;		DrawPic(id, myDrawPoint);	end;end.