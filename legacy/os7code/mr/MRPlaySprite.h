// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRPlaySprite.h// Auth: Dave Peck// Date: 7/3/98// Desc: Code to deal with smoothly moving game objects in level play.// -----------------------------------------------------------------------------// Includes// -----------------------------------------------------------------------------// -----------------------------------------------------------------------------// Constants// -----------------------------------------------------------------------------// -----------------------------------------------------------------------------// Data Structures// -----------------------------------------------------------------------------// info for the oliver spritetypedef struct OliverInfo {	// which way is oliver moving?	Point			oliverMotion;		// all the values are used to animate oliver.	short			oliverFrame;	short			oliverFrameDir;	short			oliverAnimState;	short			oliverMotionDir;	short			oliverFinalFrame;	long			startAnim;	short			freezeTicks;	short			lastZapKey;		// information about what oliver is pushing	Boolean			isPushing;	Boolean			pushHack;	SpritePtr		pushingSprite;		// certain state variables about what oliver is doing.	Boolean			specialAnim;	Boolean			denySpecial;	Boolean			didZap;	Boolean			isDead;	Boolean			zappedBlankPiece;		// red disk info	Boolean			oliverDiskDrop;	Boolean			allowDiskDrop;} ;typedef struct OliverInfo OliverInfo;// info attached to a pushed spritetypedef struct PushInfo {	Boolean		isGoldDisk;	short		colDelta, rowDelta;} ;typedef struct PushInfo PushInfo;// info attached to a falling spritetypedef struct FallInfo {	short		fallRowDelta;	Boolean		firstFall;} ;typedef struct FallInfo FallInfo;// info attached to a rolling spritetypedef struct RollInfo {	short		fallRowDelta;	short		rollColDelta;} ;typedef struct RollInfo RollInfo;// info for all moving enemy spritestypedef struct MoverInfo {	short		rowDelta, colDelta;	short		facing;	Boolean		hasExploded;};typedef struct MoverInfo MoverInfo;// info for a quark spritetypedef struct QuarkInfo {	short		rowDelta, colDelta;	short		facing;	Boolean		hasExploded;};typedef struct QuarkInfo QuarkInfo;// info for a scissor spritetypedef struct ScissorInfo {	short 		rowDelta, colDelta;	short		facing;	Boolean		hasExploded;		// for animation:	short		lastFacing;	short		internalFrame;	short		internalDir;	short		baseFrame;		// for turning:	Boolean		isTurning;	Boolean		clockwiseTurn;	long		turnTime;	short		turningTo;		// for synch in turning	short		turnedCount;} ;typedef struct ScissorInfo ScissorInfo;// info attached to each spritetypedef struct MRSpriteTagStruct {	short			spriteType;	short			tileID;	PieceKind		theKind;	LevelCBInfo		cb;	Point			loc;		// in level coords.	Point			newLoc;		// used for moving sprites that keep phantoms in two places.			Ptr				frameProc;		// MRSpriteFrameProcPtr	Ptr				moveProc;		// MRSpriteMoveProcPtr	Ptr				moveDoneProc;	// MRSpriteMoveProcPtr		// info for particular kinds of sprites	union {		OliverInfo	oliver;		PushInfo	push;		FallInfo	fall;		RollInfo	roll;						MoverInfo	mover;		// mover works equally well for 		QuarkInfo	quark;		// scissor, quark, what have you.		ScissorInfo scissor;	} info;};typedef struct MRSpriteTagStruct MRSpriteTagStruct;typedef MRSpriteTagStruct *MRSpriteTag;typedef void (*MRSpriteFrameProcPtr) ( LevelCBInfo cbData,									   MRSpriteTag theTag,									   SpritePtr theSprite,									   FramePtr curFrame,									   long *frameIndex );typedef void (*MRSpriteMoveProcPtr)  ( LevelCBInfo cbData,									   MRSpriteTag theTag,									   SpritePtr theSprite,									   short row, short col );									   // -----------------------------------------------------------------------------// Global Data// -----------------------------------------------------------------------------// -----------------------------------------------------------------------------// Function Prototypes// -----------------------------------------------------------------------------void MakeSprite_Fall( LevelCBInfo cbData, short row, short col, short fallRowDelta );void MakeSprite_Roll( LevelCBInfo cbData, 					 short row, short col, 					 short rollColDelta, 					 short fallRowDelta );void MakeSprite_Quark( LevelCBInfo cbData, short row, short col );void MakeSprite_Scissor( LevelCBInfo cbData, short row, short col, short initFacing );void MakeSprite_Push( LevelCBInfo cbData, 					SpritePtr theSprite, 					short col, short row, short colDelta, short rowDelta, 					short newTile, 					PieceKind newKind );void MakeSprite_Oliver( LevelCBInfo cbData );// -----------------------------------------------------------------------------// Functions// -----------------------------------------------------------------------------