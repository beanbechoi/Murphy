// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRResources.h// Auth: Dave Peck// Date: 6/11/97// Desc: Utilities for managing multiple resource files inside MR.// ----------------------------------------------------------------// Includes// ----------------------------------------------------------------#include "MacIncludes.h"// ----------------------------------------------------------------// Constants// ----------------------------------------------------------------// For the change-bit-depth dialog.#define kDepthQueryResType 		'dqRT'				// Creative bugger, eh?#define kDepthQueryResID		128					// Wowzers.// ----------------------------------------------------------------// Data Structures// ----------------------------------------------------------------// ----------------------------------------------------------------// Global Data// ----------------------------------------------------------------// ----------------------------------------------------------------// Function Prototypes// ----------------------------------------------------------------// Initialize MR Resource Files; prepare to use them.// Returns false if failed.// This generally happens if one of the (many!) data files// could not be found:Boolean MRResourcesInit();// Clean  up usage of MR Resource Files.void MRResourcesClose();// Don't be silly, you code-reader you. This does the obvious.Boolean MRResourceExists( ResType resourceType,						  int resourceID );// Blindly save data into resource of given type & ID,// even if something existed there beforehand.// Return false if failed. Also, if there is a failure,// this routine returns false. In addition, returns false upon failure.Boolean MROverwriteResource( ResType resourceType,							 int resourceID,							 Handle resourceData,							 char* resourceName );				 Boolean MROverwriteResourceName( ResType resourceType,								 Handle resourceData,							 	 char* resourceName );				 							 // Choose a resource file; balance these calls with a call to MRRestoreResFile();void MRMainResFile();void MRAquatronResFile();void MRGeneralResFile();void MRPlayersResFile();void MRPicturesResFile();void MRInfotronResFile();void MRDeathtronResFile();void MRSavanatronResFile();void MRWorldResFile();void MRGfxAlias();void MRSndAlias();void MRTerrainAlias();// routines for mucking with the aliasesvoid MRSetGfxAlias();void MRSetSndAlias();void MRSetTerrainAlias( short levelWorld );void MRRestoreGfxAlias();void MRRestoreSndAlias();// Use this routine to balance previous calls. Very important.void MRRestoreResFile();// ----------------------------------------------------------------// Functions// ----------------------------------------------------------------