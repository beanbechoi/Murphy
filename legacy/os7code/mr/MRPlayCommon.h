// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRPlayCommon.h// Auth: Dave Peck// Date: 7/3/98// Desc: Common functions, constants, and structures for playing a level// -----------------------------------------------------------------------------// Includes// -----------------------------------------------------------------------------#include <SWIncludes.h>#include "SWGameUtils.h"#include "MRGfxUtils.h"#include "MacIncludes.h"#include "MRPlayConstants.h"#include "MRQueue.h"#include "MRPrefs.h"#include "MRPlayers.h"#include "MRResources.h"#include "MRError.h"#include "MRSound.h"#include "MRLoop.h"#include "MRFade.h"#include "MacIncludes.h"#include <string.h>#include <stdio.h>#include "MacColorOff.h"#include "MRMemoryDebug.h"// -----------------------------------------------------------------------------// Constants// -----------------------------------------------------------------------------// -----------------------------------------------------------------------------// Data Structures// -----------------------------------------------------------------------------// wow... a wacky struct for phase infotypedef struct PhaseInfo {	short	phaseCount;	long	lastPhaseTime;	short*	phaseState;	Point*	phaseLoc;};typedef struct PhaseInfo PhaseInfo;// previous rendition of the extra level infotypedef struct OldExtraLevelInfo {	short	reqInfo;	short	levelWorld;	char	levelTitle[256];	char	levelInfo[256];	short	phCount;	short	pvCount;	short	kindCount;};typedef struct OldExtraLevelInfo OldExtraLevelInfo;// extra level informationtypedef struct ExtraLevelInfo {	short	reqInfo;	short	levelWorld;	char	levelTitle[256];	char	levelInfo[256];	short	phCount;	short	pvCount;	short	kindCount;	short	actualInfo;	short	hours, mins, secs;	short	dataOne;	short	dataTwo;	short	dataThree;} ;typedef struct ExtraLevelInfo ExtraLevelInfo;// the level entry - there are 120x120 of these! = 230ktypedef struct LevelPoint {	Point p;			// the icon	short trig;			// the trigger associated with this piece.	Point trigP;		// the icon to trigger to.	short state;		// current state of piece	short kind;			// normal, switch, level	short levelID;		// level associated with this piece.};typedef struct LevelPoint LevelPoint;// the map callback datatypedef struct LevelCBInfoStruct {	// basic information about screen layout	WindowPtr		mainWind;	Rect			fitRect;	Rect			statRect;	Rect			levelRect;		// stat info rectangles	Rect			rdMiniRect, infoMiniRect;	Rect			rdCountRect, infoCountRect;		// the actual level, and the corresponding on-screen tiles	LevelPoint		level[kMaxLevelSize][kMaxLevelSize];	ExtraLevelInfo	extraInfo;	Boolean			extendedInfo;	Point			levSize;	TileMapPtr		tiles;	// level statistics	short			infotronCount, lastInfotronCount;	short			redDiskCount, lastRedDiskCount;		// whether or not they won the level	Boolean			wonLevel;		// the sprite world for animation	SpriteWorldPtr	sw;	SpriteLayerPtr	sLayer;	SpriteLayerPtr	againLayer;		// special information for cool smooth scrolling with snap-back	Rect			offRect;	Rect			midRect;		// the main player sprite, and relevant information	SpritePtr		oliverSprite;	Point			oliverStartLoc;	Point			oliverCurLoc;		// that's a wierd sprite, lemme tell ya!	SpritePtr		deathSprite;	Rect			yesRect, yesGfxRect;	Rect			noRect, noGfxRect;	Rect			deathRect;		// for tile animation, when was it last animated?	long			lastTileAnimTicks;		// a clever method of keeping track of keys & responding to them ASAP.	short			theKeys[kMaxLevelPresses];	int				numKeys;	Boolean			specialKeyDown;	short			specialKeyRelease;			// an array to keep track of the different kinds of pieces during game play.	int				pieceKinds[kLevelTilesDeep][kLevelTilesWide];		// Info to make the Oliver on the status bar bubble mindlessly	MRBubbleData	bubbleData;		// port motion must be through two spaces.	Boolean			lastWasPort;	short			portRowDelta, portColDelta;		// the queue of chores	MRQueue			chores;		// true if we're finished	Boolean			doneWithLevel;		// the next direction to roll in	short			nextRollDirection;		// have we done the initial falls & rolls?	Boolean			doneInitialFalls;		// stuff for term-use sounds:	long			lastTermSound;		// keeps track of time spent:	long			startPlayTime;	long			stopPlayTime;		// but you can't count time paused!	long			totalPauseTime;	long			startPauseTime;	Boolean			isPaused;		// keeps track of how long it has been since	// a key was pressed.	long			lastPressTime;		// what to do!	Boolean			playAgain;		// time limits	Boolean			timer;	short			hours, mins, secs;	short			ldHours, ldMins, ldSecs;	Rect			hoursBox, minsBox, secsBox;	long			timerTicks;	long			timerTickDiff;		// step key	Boolean			stepOn;		// Info for phasing terminals	PhaseInfo*		phase;};typedef struct LevelCBInfoStruct LevelCBInfoStruct;typedef LevelCBInfoStruct *LevelCBInfo;// info about a particular piecetypedef struct PieceKind{	Boolean		isRounded;	Boolean		isExplodable;		// most things are explodable (i.e. they can be blown up)	Boolean		isIgnitable;		// a few things also ignite when they're exploded.	Boolean		isPassable;	Boolean 	isPort;	Boolean		isDeadly;	Boolean		isElectric;	Boolean		isEdible;	Boolean		isPushable;	Boolean		canFall;	Boolean		canRoll;	short		fallRowDelta;	short		tileID;	Boolean		isQuark;	Boolean		isOliver;	SpritePtr	moverSprite;} ;typedef struct PieceKind PieceKind;// -----------------------------------------------------------------------------// Global Data// -----------------------------------------------------------------------------// -----------------------------------------------------------------------------// Function Prototypes// -----------------------------------------------------------------------------// -----------------------------------------------------------------------------// Functions// -----------------------------------------------------------------------------void StartQuarkExplosion( LevelCBInfo cb, Point loc, Boolean shouldIgnite );void GetPieceKindFromLoc( LevelCBInfo cb, PieceKind *theKind, short row, short col );void GetPieceKind( PieceKind *theKind, short tileID );void DrawLevelTile( SpriteWorldPtr sw, short row, short col, short tileID );void StartExplosion( LevelCBInfo cb, Point loc, Boolean shouldIgnite );void IgniteExplosion( LevelCBInfo cb, Point loc );void IgniteQuarkExplosion( LevelCBInfo cb, Point loc );void CheckForMotions( LevelCBInfo cb, short row, short col );void KillOliver( SpritePtr oliverSprite, Boolean electric );void EatPiece( LevelCBInfo cbData, short newTile );void ActivateSingleLaser( LevelCBInfo cb, short v, short h, short dv, short dh );short AbsOf( short number );short ProximityToOliver( LevelCBInfo cb, Point loc );SpritePtr FindSpriteAtLocation( LevelCBInfo cbData, short row, short col );SpritePtr FindMoverAtLocation( LevelCBInfo cbData, short row, short col );void OpenAllExits( LevelCBInfo cb );void DrawLevelStatistics( LevelCBInfo cb );void DrawNumberInRect( short num, Rect r, RGBColor drawColor );void DrawNumberInRectSize( short num, Rect r, RGBColor drawColor, short theSize );void DrawTimeRemaining( LevelCBInfo cb );void HitBottomCheck( LevelCBInfo cbData, short row, short col );void ActivateLaser( LevelCBInfo cb, short v, short h );short RotateClockwise( short facing );short RotateCounterClockwise( short facing );void AbsoluteFacingDeltas( short facing, short *rowDelta, short *colDelta );short AbsoluteFacing( short facing, short inDirection );void SetDeltasFromFacing( short facing, short inDirection, short* rowDelta, short* colDelta );short GetTileFromFacing( LevelCBInfo cb, short row, short col, short facing, short inDirection );void ExplodeYellowDisks( LevelCBInfo cb );void PhaseHardware( LevelCBInfo cb );void GetPortPassable( PieceKind *theKind, TileMapPtr tiles, short hLoc, short vLoc, short hDelta, short vDelta );Boolean SafeToPush( LevelCBInfo cb, short h, short v, short hDelta, short vDelta );short ProximityPanning( LevelCBInfo cb, Point loc );DrawProcPtr OFFDRAWPROC();DrawProcPtr ONDRAWPROC();DrawProcPtr TILEDRAWPROC();DrawProcPtr SPRITEDRAWPROC();DrawProcPtr OFFDRAWPROCINT();DrawProcPtr ONDRAWPROCINT();DrawProcPtr TILEDRAWPROCINT();DrawProcPtr SPRITEDRAWPROCINT();void PlayDrawProcsInit();