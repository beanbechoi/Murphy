unit CSuicideChore;interface	uses		BackChoresIntf;implementation	procedure CSuicideChore.ISuicideChore (x, y: integer);	begin		IInfoChore(x, y);		uselessCount := 0;		myIdent := kSuicideChore;	end;	procedure CSuicideChore.Perform (var maxSleep: Longint);		var			whatBelow: integer;			o: CGridPiece;			theDir: integer;			dat: integer;			sr: boolean;	begin		o := cinfoapp(gapplication).GetGridObj(xq, yq);		if not o.CanFall then			remove		else			begin				whatBelow := CInfoApp(gapplication).GetGPane.GetBoard.GetData(xq, yq + 1);				o := CInfoApp(gapplication).GetGridObj(xq, yq);				if whatBelow = 129 then					begin						o.CheckFall(xq, yq);						remove;					end				else					begin						theDir := CInfoApp(gapplication).GetNextRollDir;						if not o.CheckRoll(xq, yq, theDir) then							begin								if o.CheckRoll(xq, yq, 8 - theDir) then									remove								else									uselessCount := uselessCount + 1;							end						else							remove;						CInfoApp(gapplication).ToggleRollDir;					end;			end;		if (uselessCount > 15) then			remove;	end;end.