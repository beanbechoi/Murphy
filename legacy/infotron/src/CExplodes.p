unit CExplodes;interface	uses		TCL, GridPieceIntf;implementation	procedure CExplodes.InitPiece;	begin		inherited InitPiece;		destructable := true;		explodes := true;	end;	function CExplodes.WalkOnto (x, y: integer): boolean;	begin		WalkOnto := FALSE;	end;	procedure CExplodes.Explode (x, y: integer);		var			myChore: CAnimChore;			aa: animArray;			xloc, yloc: integer;			tempAnim: AnimArray;			whatIsWhereIAm: integer;			myExplChore: CExplChore;	begin		New(myExplChore);		myExplChore.IExplChore(x, y, explAnim, 11);		CInfoAPp(gapplication).FudADD(myExplChore);{    New(myChore);}{    tempAnim := explAnim;}{    myChore.IAnimChore(tempAnim, 11, 0, x, y);}{    CInfoApp(gApplication).FudADD(myChore);}{    whatIsWhereIAm := CInfoApp(gapplication).getgpane.getboard.GetData(x, y);}{    CInfoAPp(gapplication).getgpane.getboard.setdata(x, y, 250);}{    for xloc := x - 1 to x + 1 do}{    for yloc := y - 1 to y + 1 do}{    if (xloc <> x) or (yloc <> y) then}{    begin}{    if CInfoApp(gApplication).GetGridObj(xloc, yloc).CanExplode then}{    CInfoApp(gApplication).GetGridObj(xloc, yloc).Explode(xloc, yloc)}{    else}{    CInfoApp(gApplication).GetGridObj(xloc, yloc).Destroy(xloc, yloc);}{    end;}{    CInfoApp(gapplication).getgpane.getboard.setdata(x, y, whatiswhereiam);}	end;end.