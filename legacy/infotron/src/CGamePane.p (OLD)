unit CGamePane;interface	uses		TCL, InfoIntf;implementation	procedure CGamePane.IGamePane (anEnclosure: CView; aSupervisor: CBureaucrat);		var			screenHeight, screenWidth: integer;			someNondescriptVariable: CBoardPane;	begin		new(itsBoard);		new(itsPlayer);		new(itsMurphy);		screenHeight := screenbits.bounds.bottom - screenbits.bounds.top - 19;		screenWidth := screenbits.bounds.right - screenBits.bounds.left + 1;		IPane(anEnclosure, aSupervisor, screenWidth, screenHeight, 0, 0, sizFixedSticky, sizFixedSticky);		setUpSubviews;		new(someNondescriptVariable);		someNondescriptVariable.IBoardPane(self, self, 448, 320, 95, 35, sizFixedSticky, sizFixedSticky);	end;	procedure CGamePane.free;	begin		itsMurphy.free;		itsPlayer.free;		itsBoard.free;		inherited free;	end;	procedure CGamePane.setUpSubviews;		var			aTextPane, aTextPane2: CInfoTextPane;			anIntPane: CInfoIntPane;	begin{initialize player's name box}		new(aTextPane);		aTextPane.IInfoTextPane(self, self, 151, 18, 187, 409, sizFIXEDSTICKY, sizFIXEDSTICKY);		aTextPane.setColor(myRedColor);{initialize level name box}		new(aTextPane2);		aTextPane2.IInfoTextPane(self, self, 268, 18, 187, 433, sizFIXEDSTICKY, sizFIXEDSTICKY);		aTextPane2.setColor(myGreenColor);{initialize level number box}		new(anIntPane);		anIntPane.IInfoIntPane(self, self, 30, 18, 488, 433, sizFIXEDSTICKY, sizFIXEDSTICKY);		anIntPane.setNumDigits(3);		anIntPane.setColor(myGreenColor);{initialize info counter}		new(anIntPane);		anIntPane.IInfoIntPane(self, self, 32, 18, 495, 409, sizFIXEDSTICKY, sizFIXEDSTICKY);		anIntPane.setNumDigits(3);		anIntPane.setColor(myGreenColor);{initialize bomb counter}		new(anIntPane);		anIntPane.IInfoIntPane(self, self, 24, 18, 609, 418, sizFIXEDSTICKY, sizFIXEDSTICKY);		anIntPane.setNumDigits(2);		anIntPane.setColor(myBlueColor);	end;	function CGamePane.getPlayer: CPlayer;	begin		getPlayer := itsPlayer;	end;	function CGamePane.getBoard: CBoard;	begin		getBoard := itsBoard;	end;	function CGamePane.getMurphy: CMurphy;	begin		getMurphy := itsMurphy;	end;	function CGamePane.GetBPane: CBoardPane;	begin		GetBPane := CBoardPane(itsSubviews.nthItem(6));	end;	function CGamePane.IsPlayerLoaded: boolean;	begin		IsPlayerLoaded := hasPlayer in CInfoApp(gApplication).GetInfoStatus;	end;	function CGamePane.isGamePlaying: boolean;	begin		isGamePlaying := isPlaying in CInfoApp(gApplication).GetInfoStatus;	end;	function CGamePane.effectsOn: boolean;	begin		effectsOn := hasSound in CInfoApp(gApplication).GetInfoStatus;	end;	procedure CGamePane.startNewLevel;		var			sizeX, sizeY, x, y: integer;			o: CGridPiece;			mySuicide: CSuicideChore;			myContMove: CContMoveChore;			myStat: InfoStatus;			wo: integer;			ignore: boolean;			dumbStupidUselessRect: rect;			w1, w2, w3, w4: integer;			o2: CGridPiece;	begin		CInfoApp(gapplication).DoKillChores;		{It _is_ safe to call DoKillChores from here!!!}		ignore := GetBoard.LoadBoard(GetPlayer.GetLevelName);		myStat := CInfoApp(gapplication).GetInfoStatus;		CInfoApp(gapplication).SetInfoStatus(myStat + [isplaying] - [freezeMurphy]);		CInfoApp(gapplication).whatToBlank := 129;		{bad programming style. Sorry!!!}		GetBPane.GotNewBoard;		CInfoApp(gapplication).GetMurphy.numInfos := CInfoApp(gapplication).GetGPane.GetBoard.InfoCount;		HideCursor;		getBoard.getSize(sizeX, sizeY);		CInfoApp(gapplication).ClearSuicides;		GetMurphy.Init;		for x := 1 to sizeX do			for y := 1 to sizeY do				begin					o := CInfoApp(gapplication).GetGridObj(x, y);					wo := GetBoard.GetData(x, y);					if (o.CanFall) then						begin							w1 := GetBoard.GetData(x, y + 1);							if w1 = 129 then								begin									new(mySuicide);									mySuicide.ISuicideChore(x, y);		{death chore.}									CInfoApp(gapplication).FudADD(mySuicide);								end							else								begin									o2 := CInfoApp(gapplication).GetGridObj(x, y + 1);									if o2.IsRounded then										begin											w1 := GetBoard.GetData(x - 1, y);											w2 := GetBoard.GetData(x - 1, y + 1);											w3 := GetBoard.GetData(x + 1, y);											w4 := GetBoard.GetData(x + 1, y + 1);											if ((w1 = 129) and (w2 = 129)) or ((w3 = 129) and (w4 = 129)) then												begin													new(mySuicide);													mySuicide.ISuicideChore(x, y);		{death chore.}													CInfoApp(gapplication).FudADD(mySuicide);												end;										end;								end;						end					else if (wo >= 300) and (wo <= 304) then						begin							CBug(o).Make(x, y);							GetBoard.SetData(x, y, 128);						end					else if (wo >= 550) and (wo <= 561) then						CTerminal(o).Make(x, y)					else if o.CanMove then						begin							new(myContMove);							myContMove.IContMoveChore(x, y);		{make a new chore}							CInfoApp(gapplication).FudADD(myContMove);						end;				end;		SetTheBoxes;	end;	procedure CGamePane.EndLevel;		{safely end a level}		var			myWChore: CWaitTimeChore;			myKChore: CKillGameChore;			info: InfoStatus;	begin		info := CInfoApp(gapplication).GetInfoStatus;		CInfoApp(gapplication).SetInfoStatus(info + [freezeMurphy]);		new(myWChore);		new(myKChore);		myKChore.IKillGameChore;		myWChore.IWaitTimeChore(myKChore, 4);		CInfoApp(gapplication).FudADD(myWChore);	end;	procedure CGamePane.doCommand (theCommand: longint);	begin		inherited doCommand(theCommand);	end;	procedure CGamePane.setTheBoxes;		var			dumbRec: rect;	begin		CInfoTextPane(itsSubviews.nthItem(1)).setText(itsPlayer.getName);		CInfoTextPane(itsSubviews.nthItem(2)).setText(itsPlayer.getLevelName);		CInfoIntPane(ItsSubviews.nthItem(3)).setValue(itsPlayer.getLevelNum);		if isPlaying in CInfoApp(gapplication).GetInfoStatus then			begin				CInfoIntPane(itsSubviews.nthItem(4)).SetValue(GetMurphy.numInfosLeft);				CInfoIntPane(itsSubviews.nthItem(5)).SetValue(GetMurphy.NumBombs);				CInfoIntPane(ItsSubviews.nthItem(4)).draw(dumbrec);				CInfoIntPane(ItsSubviews.nthItem(5)).draw(dumbrec);			end;		CInfoTextPane(itsSubviews.nthItem(1)).draw(dumbrec);		CInfoTextPane(itsSubviews.nthItem(2)).draw(dumbrec);		CInfoIntPane(ItsSubviews.nthItem(3)).draw(dumbrec);	end;	procedure CGamePane.draw (var area: rect);		var			at: point;			item, numItems: longint;	begin		prepare;		RGBForeColor(myBlackColor);		FillRect(area, black);		at.h := 203;		at.v := 378;		drawPic(144, at);		at.h := 423;		drawPic(144, at);		at.h := 313;		drawPic(144, at);		at.h := 40;		at.v := 8;		drawPic(128, at);		at.h := 1;		at.v := 399;		drawPic(129, at);		at.h := 494;		at.v := 408;		drawPic(141, at);		at.h := 608;		at.v := 417;		drawPic(142, at);		numItems := itsSubviews.getNumItems;		for item := 1 to numItems do			CPane(itsSubviews.nthItem(item)).draw(area);	end;end.