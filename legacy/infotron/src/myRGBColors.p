unit myRGBColors;interface	uses{nose}		picker;	function myLightGrayColor: RGBColor;	function myGrayColor: RGBColor;	function myDarkGrayColor: RGBColor;	function myYellowColor: RGBColor;	function myRedColor: RGBColor;	function myBlueColor: RGBColor;	function myGreenColor: RGBColor;	function myBlackColor: RGBColor;	function myWhiteColor: RGBColor;	function changeKey (map: keyMap; var shift: boolean; var num: integer): char;	procedure drawInteger (anInteger: integer; leadingZeros: integer);	procedure centerString (s: str255; y, lSide, rSide: integer);implementation	function myBlackColor: RGBColor;		var			col: RGBColor;	begin		col.red := 0;		col.blue := 0;		col.green := 0;		myBlackColor := col;	end;	function myWhiteColor: RGBColor;		var			col: RGBColor;	begin		Col.red := smallfract(65535);		Col.blue := smallfract(65535);		Col.green := smallfract(65535);		myWhiteColor := col;	end;	function myLightGrayColor: RGBColor;		var			color: RGBColor;	begin		color.red := smallfract(637300);		color.green := color.red;		color.blue := color.green;		myLightGrayColor := color;	end;	function myGrayColor: RGBColor;		var			color: RGBColor;	begin		color.red := smallfract(295000);		color.green := color.red;		color.blue := color.green;		myGrayColor := color;	end;	function myDarkGrayColor: RGBColor;		var			color: RGBColor;	begin		color.red := 18000;		color.green := color.red;		color.blue := color.green;		myDarkGrayColor := color;	end;	function myRedColor: RGBColor;		var			col: RGBColor;	begin		Col.red := smallfract(65535);		Col.green := 3500;		Col.blue := 3500;		myRedColor := col;	end;	function myYellowColor: RGBColor;		var			col: RGBColor;	begin		Col.red := smallfract(65535);		Col.green := smallfract(45000);		Col.blue := smallfract(0);		myYellowColor := col;	end;	function myBlueColor: RGBColor;		var			col: RGBColor;	begin		Col.red := 9191;		Col.green := 9716;		Col.blue := smallfract(65535);		myBlueColor := col;	end;	function myGreenColor: RGBColor;		var			col: RGBColor;	begin		Col.red := 2845;		Col.green := smallfract(53247);		Col.blue := 2845;		myGreenColor := col;	end;	function changeKey (map: keyMap; var shift: boolean; var num: integer): char;		var			c: integer;	begin		num := 999;		for c := 0 to 51 do			if map[c] then				num := c;		if num = 999 then			for c := 60 to 122 do				if map[c] then					num := c;		shift := map[56];		if c = 999 then			changeKey := '+'		else			case num of				0: 					changeKey := 'A';				11: 					changeKey := 'B';				8: 					changeKey := 'C';				2: 					changeKey := 'D';				14: 					changeKey := 'E';				3: 					changeKey := 'F';				5: 					changeKey := 'G';				4: 					changeKey := 'H';				34: 					changeKey := 'I';				38: 					changeKey := 'J';				40: 					changeKey := 'K';				37: 					changeKey := 'L';				46: 					changeKey := 'M';				45: 					changeKey := 'N';				31: 					changeKey := 'O';				35: 					changeKey := 'P';				12: 					changeKey := 'Q';				15: 					changeKey := 'R';				1: 					changeKey := 'S';				17: 					changeKey := 'T';				32: 					changeKey := 'U';				9: 					changeKey := 'V';				13: 					changeKey := 'W';				7: 					changeKey := 'X';				16: 					changeKey := 'Y';				6: 					changeKey := 'Z';				18: 					changeKey := '1';				19: 					changeKey := '2';				20: 					changeKey := '3';				21: 					changeKey := '4';				23: 					changeKey := '5';				22: 					changeKey := '6';				26: 					changeKey := '7';				28: 					changeKey := '8';				25: 					changeKey := '9';				29: 					changeKey := '0';				27: 					changeKey := '-';				24: 					changeKey := '=';				51: 					changeKey := '~';				50: 					changeKey := '`';				49: 					changeKey := '_';				48: 					changeKey := ' ';				42: 					changeKey := '\';				30: 					changeKey := ']';				33: 					changeKey := '[';				39: 					changeKey := '"';				41: 					changeKey := ';';				44: 					changeKey := '/';				47: 					changeKey := '.';				43: 					changeKey := ',';				82: 					changeKey := 'a';				83: 					changeKey := 'b';				84: 					changeKey := 'c';				85: 					changeKey := 'd';				86: 					changeKey := 'e';				87: 					changeKey := 'f';				88: 					changeKey := 'g';				89: 					changeKey := 'h';				91: 					changeKey := 'i';				92: 					changeKey := 'j';				71: 					changeKey := 'Ù';				otherwise					changeKey := '+';			end;  {case}		if shift then			case num of				18: 					changeKey := '!';				19: 					changeKey := '@';				20: 					changeKey := '#';				21: 					changeKey := '$';				23: 					changeKey := '%';				22: 					changeKey := '^';				26: 					changeKey := '&';				28: 					changeKey := '*';				25: 					changeKey := '(';				29: 					changeKey := ')';				49: 					changeKey := '_';				42: 					changeKey := '|';				30: 					changeKey := '}';				33: 					changeKey := '{';				39: 					changeKey := '"';				41: 					changeKey := ':';				44: 					changeKey := '?';				47: 					changeKey := '>';				43: 					changeKey := '<';				otherwise					;			end;	end;	procedure drawInteger (anInteger: integer; leadingZeros: integer);		var			ones, tens, hundreds, thousands, tenthousands, result: integer;			alReady: boolean;	begin		if anInteger > 9999 then			tenThousands := anInteger div 10000		else			tenThousands := 0;		result := anInteger mod 10000;		if anInteger > 999 then			thousands := result div 1000		else			thousands := 0;		result := result mod 1000;		if anInteger > 99 then			hundreds := result div 100		else			hundreds := 0;		result := result mod 100;		if anInteger > 9 then			tens := result div 10		else			tens := 0;		ones := result mod 10;		alReady := false;		if (tenThousands <> 0) or (leadingZeros = 5) then			begin				drawChar(chr(tenthousands + 48));				alReady := true;			end;		if (thousands <> 0) or (leadingZeros = 4) or alReady then			begin				drawChar(chr(thousands + 48));				alReady := true;			end;		if (hundreds <> 0) or (leadingZeros = 3) or alReady then			begin				drawChar(chr(hundreds + 48));				alReady := true;			end;		if (tens <> 0) or (leadingZeros = 2) or alReady then			drawChar(chr(tens + 48));		drawChar(chr(ones + 48));	end;	procedure centerString (s: str255; y, lSide, rSide: integer);		var			w, textStart: integer;	begin		textStart := 12;		w := stringWidth(s);		while w > 130 do			begin				textStart := textStart - 1;				textSize(textStart);				w := stringWidth(s);			end;		textStart := (((rSide - lSide) - w) div 2) + lSide;		moveTo(lSide, y - 4);		lineTo(textStart - 5, y - 4);		moveTo(textStart, y);		drawString(s);		moveTo(textStart + w + 4, y - 4);		lineTo(rSide, y - 4);		textSize(12);	end;end.