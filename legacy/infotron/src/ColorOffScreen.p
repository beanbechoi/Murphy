unit ColorOffScreen;interface	uses		QDOffscreen;	function MakeGWorld (r: rect): GWorldPtr;	procedure DestroyGWorld (var o: GWorldPtr);	procedure CopyWorldBits (world: GWorldPtr; window: WindowPtr; r: rect);	procedure CopyBitingBits (biting: BitMap; world: GWorldPtr; r: rect);	procedure CopyWorldBits2 (world: GWorldPtr; window: WindowPtr; r1, r2: rect);	procedure CopyOffscreenToBitMap (world: GWorldPtr; biting: BitMap; r: rect);	procedure COTBRand (world: GWorldPtr; biting: bitMap; r: rect);implementation	function MakeGWorld (r: rect): GWorldPtr;		var			oldGD: GDHandle;			oldGW, newWorld: GWorldPtr;			err: QDErr;			pt: GrafPtr;	begin		GetPort(pt);		GetGWorld(oldGW, oldGD);		err := NewGWorld(newWorld, 8, r, nil, oldGD, []);		if err <> noErr then			ExitToShell;		makegworld := newWorld;	end;	procedure DestroyGWorld (var o: GWorldPtr);	begin		ClosePort(GrafPtr(o));		DisposPtr(ptr(o));	end;{CopyBits(grafptr(gOffScreen)^.portbits,grafptr(gOffScreen)^.portbits,gOffScreen^.portRect,pOffSetRect(gOffScreen^.portRect,32,0),srcCopy,nil);}	procedure CopyWorldBits (world: GWorldPtr; window: WindowPtr; r: rect);		var			clr: RGBColor;			m: Boolean;	begin		m := LockPixels(world^.portPixMap);		CopyBits(GrafPtr(world)^.portBits, GrafPtr(window)^.portBits, world^.portRect, r, srcCopy, nil);		UnlockPixels(world^.portPixMap);	end;	procedure CopyWorldBits2 (world: GWorldPtr; window: WindowPtr; r1, r2: rect);		var			clr: RGBColor;			m: Boolean;	begin		m := LockPixels(world^.portPixMap);		CopyBits(GrafPtr(world)^.portBits, GrafPtr(window)^.portBits, r1, r2, srcCopy, nil);		UnlockPixels(world^.portPixMap);	end;	procedure CopyBitingBits (biting: BitMap; world: GWorldPtr; r: rect);		var			clr: RGBColor;			m: Boolean;	begin		m := LockPixels(world^.portPixMap);		CopyBits(biting, GrafPtr(world)^.portBits, biting.bounds, r, srcCopy, nil);		UnlockPixels(world^.portPixMap);	end;	procedure COTBRand (world: GWorldPtr; biting: bitMap; r: rect);		var			clr: RGBColor;			m: Boolean;	begin		m := LockPixels(world^.portPixMap);		CopyBits(GrafPtr(world)^.portBits, biting, r, biting.bounds, abs(random mod 8), nil);		UnlockPixels(world^.portPixMap);	end;	procedure CopyOffscreenToBitMap (world: GWorldPtr; biting: BitMap; r: rect);		var			clr: RGBColor;			m: Boolean;	begin		m := LockPixels(world^.portPixMap);		CopyBits(GrafPtr(world)^.portBits, biting, r, biting.bounds, srcCopy, nil);		UnlockPixels(world^.portPixMap);	end;end.