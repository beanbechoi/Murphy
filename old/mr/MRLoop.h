// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRLoop.h// Auth: Dave Peck// Date: 7/8/97// Desc: Main event loop - header//       I've tried to make it easy for me to use the main event loop for my purposes.//       That is, it can be used as part of the interface just as easily as part of//       the game.// ----------------------------------------------------------------// Includes// ----------------------------------------------------------------#include "MacIncludes.h"// ----------------------------------------------------------------// Constants// ----------------------------------------------------------------#define kDefaultSleepTime		0x10// ----------------------------------------------------------------// Data Structures// ----------------------------------------------------------------// the MR User Data type.typedef long MRUData;// callback routines should return true if the main loop should exit.typedef Boolean (*MRClickPtr)(Point location, int modifiers, MRUData info );typedef Boolean (*MRKeyPtr)(char theKey, int modifiers, MRUData info );typedef Boolean (*MRIdlePtr)(int modifiers, MRUData info );typedef Boolean (*MRUpdatePtr)(WindowPtr wind, MRUData info );typedef Boolean (*MRKeyUpDownPtr)(char theKey, int modifiers, MRUData info, Boolean keyUp );// ----------------------------------------------------------------// Global Data// ----------------------------------------------------------------// ----------------------------------------------------------------// Function Prototypes// ----------------------------------------------------------------void MRLoopPrepare();void MRClearCallbacks();void MRSetSleepTime( unsigned long newSleepTime );void MRSetClickCallback( MRClickPtr clickBack );void MRSetKeyCallback( MRKeyPtr keyBack );void MRSetKeyUpDownCallback( MRKeyUpDownPtr keyBack );void MRSetIdleCallback( MRIdlePtr idleBack );void MRSetUpdateCallback( MRUpdatePtr updateBack );void MRAllowKeyUp();void MRRestoreKeyUp();void MREventLoop( MRUData callbackData );void MRAllowSwitches( Boolean doAllow );void MRCreateMenus();void MRDestroyMenus();void MRSetMonRect(Rect monRect);// ----------------------------------------------------------------// Functions// ----------------------------------------------------------------