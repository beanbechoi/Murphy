// Murphy's Revenge// (c)1997 Q Software / Dave Peck, All Rights Reserved// This source code is confidential and proprietary, and may not be reproduced// or utilized by anyone without the express written permission of Q Software.// File: MRGfxUtils.h// Auth: Dave Peck// Date: 7/2/97// Desc: for drawing pictures and other perty thangs.// ----------------------------------------------------------------// Includes// ----------------------------------------------------------------//#pragma once#include <Palettes.h>#include <QDOffscreen.h>// ----------------------------------------------------------------// Constants// ----------------------------------------------------------------#define kQSoftLogoPict			128#define kInterfacePict			129#define kSelInterfacePict		130#define kSavanaMRPict			131#define kInfoMRPict				132#define kDeathMRPict			133#define kAquaMRPict				134#define kMapRoomPict			135#define kIntroPict				136#define kAboutPict				137#define kHelpPict				138#define kQSoftBannerPict		139#define kMRBannerPict			140#define kMouseInterfacePict		142#define kBackArrowPict			153#define kBackArrowHilitePict	154#define kIntroTextPict			143#define kAboutTextPict			144#define kHelpTextPict			145#define kAddForTextPict			7#define kMRTitlePict			3000#define kGreenLettering			0#define kWhiteLettering			1// oliver states#define kNormalState 			0#define kBub1State				1#define kBub2State				2#define kBub3State				3// oliver delays#define kOliverTickDelay		8// bubbles pict id#define kIntfBubblesPictID		141// ----------------------------------------------------------------// Data Structures// ----------------------------------------------------------------#ifndef MRBubbleDataStructStuff#define MRBubbleDataStructStufftypedef struct MRBubbleDataStruct {	// stuff related to oliver bubbling.	GrafPtr			onPort;	Rect			oliverRect;	GWorldPtr		oliverOff;	int				currentOliverState;	int				currentAxis;	long			lastOliverDraw;};typedef struct MRBubbleDataStruct MRBubbleDataStruct;typedef MRBubbleDataStruct *MRBubbleData;#endif MRBubbleDataStructStuff// ----------------------------------------------------------------// Global Data// ----------------------------------------------------------------// ----------------------------------------------------------------// Function Prototypes// ----------------------------------------------------------------// ----------------------------------------------------------------// Functions// ----------------------------------------------------------------void SetPicturePalette( WindowPtr w, int pictID );void RestoreWindowColors( WindowPtr w );// frightening nonsense, really.void MRPal( WindowPtr w, PaletteHandle* p );Rect MakeEmptyRect();void ZeroRect( Rect *theRect );Rect RectFromPictureID( int pictID );Rect RectFromPicture( PicHandle thePict );void DrawPictureIDCentered( int pictID, Rect centerInside );void DrawPictureCentered( PicHandle thePict, Rect centerInside );void DrawPictureID( int pictID, Rect drawRect );void DrawPictureHand( PicHandle thePict, Rect drawRect );void DrawPictureIDAtPoint( int pictID, short h, short v );void DelayMouseTime( int numSecs );void DelayMouseTimeMusic( int numSecs );// world must be same size as the picture.void DrawPictToWorld( GWorldPtr world, int picID );// code to perform kickin-cool fontless letteringvoid MRLettering( char* toLetter, Rect letterIn, short letterColor );// effect for demonstration of modalnessvoid DimRectangle( Rect r, Boolean dimHoriz, Boolean dimVert );// code to track the "back" arrow inside of any desired rectangle:Boolean TrackBackArrow( Rect* r, MRBubbleData bubbleData );// code to track some graphical buttonBoolean TrackGraphicalButton( WindowPtr onScreen,							  Rect gfxLocation,							  Rect trackLocation,							  GWorldPtr offScreen,							  GWorldPtr offScreenHilite,							  MRBubbleData bubbleData );							  // bubbling code allows a bubbly static Oliver to be placed... ANYWHERE!void BubbleOliver( MRBubbleData theData );MRBubbleData MakeNewBubble( Rect r );void KillBubble( MRBubbleData* theData );// neat visual effect. cooler on PPC.void WipeWindowFX( WindowPtr wind  );